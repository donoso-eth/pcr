// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get url(): string | null {
    let value = this.get("url");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set url(value: string | null) {
    if (!value) {
      this.unset("url");
    } else {
      this.set("url", Value.fromString(<string>value));
    }
  }

  get admin(): string | null {
    let value = this.get("admin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set admin(value: string | null) {
    if (!value) {
      this.unset("admin");
    } else {
      this.set("admin", Value.fromString(<string>value));
    }
  }

  get rewardToken(): string | null {
    let value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rewardToken(value: string | null) {
    if (!value) {
      this.unset("rewardToken");
    } else {
      this.set("rewardToken", Value.fromString(<string>value));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get earliestProposalTimestamp(): BigInt | null {
    let value = this.get("earliestProposalTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set earliestProposalTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("earliestProposalTimestamp");
    } else {
      this.set("earliestProposalTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get interval(): BigInt | null {
    let value = this.get("interval");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interval(value: BigInt | null) {
    if (!value) {
      this.unset("interval");
    } else {
      this.set("interval", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardAmount(): BigInt | null {
    let value = this.get("rewardAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewardAmount(value: BigInt | null) {
    if (!value) {
      this.unset("rewardAmount");
    } else {
      this.set("rewardAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get currentdeposit(): BigInt | null {
    let value = this.get("currentdeposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentdeposit(value: BigInt | null) {
    if (!value) {
      this.unset("currentdeposit");
    } else {
      this.set("currentdeposit", Value.fromBigInt(<BigInt>value));
    }
  }

  get optimisticOracleLivenessTime(): BigInt | null {
    let value = this.get("optimisticOracleLivenessTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set optimisticOracleLivenessTime(value: BigInt | null) {
    if (!value) {
      this.unset("optimisticOracleLivenessTime");
    } else {
      this.set("optimisticOracleLivenessTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get priceIdentifier(): Bytes | null {
    let value = this.get("priceIdentifier");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set priceIdentifier(value: Bytes | null) {
    if (!value) {
      this.unset("priceIdentifier");
    } else {
      this.set("priceIdentifier", Value.fromBytes(<Bytes>value));
    }
  }

  get customAncillaryData(): Bytes | null {
    let value = this.get("customAncillaryData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set customAncillaryData(value: Bytes | null) {
    if (!value) {
      this.unset("customAncillaryData");
    } else {
      this.set("customAncillaryData", Value.fromBytes(<Bytes>value));
    }
  }
}
