// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get url(): string | null {
    let value = this.get("url");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set url(value: string | null) {
    if (!value) {
      this.unset("url");
    } else {
      this.set("url", Value.fromString(<string>value));
    }
  }

  get admin(): string | null {
    let value = this.get("admin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set admin(value: string | null) {
    if (!value) {
      this.unset("admin");
    } else {
      this.set("admin", Value.fromString(<string>value));
    }
  }

  get rewardToken(): string | null {
    let value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rewardToken(value: string | null) {
    if (!value) {
      this.unset("rewardToken");
    } else {
      this.set("rewardToken", Value.fromString(<string>value));
    }
  }

  get rewardAmount(): BigInt | null {
    let value = this.get("rewardAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewardAmount(value: BigInt | null) {
    if (!value) {
      this.unset("rewardAmount");
    } else {
      this.set("rewardAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get currentdeposit(): BigInt | null {
    let value = this.get("currentdeposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentdeposit(value: BigInt | null) {
    if (!value) {
      this.unset("currentdeposit");
    } else {
      this.set("currentdeposit", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardStatus(): string | null {
    let value = this.get("rewardStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rewardStatus(value: string | null) {
    if (!value) {
      this.unset("rewardStatus");
    } else {
      this.set("rewardStatus", Value.fromString(<string>value));
    }
  }

  get rewardStep(): string | null {
    let value = this.get("rewardStep");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rewardStep(value: string | null) {
    if (!value) {
      this.unset("rewardStep");
    } else {
      this.set("rewardStep", Value.fromString(<string>value));
    }
  }

  get earliestNextAction(): BigInt | null {
    let value = this.get("earliestNextAction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set earliestNextAction(value: BigInt | null) {
    if (!value) {
      this.unset("earliestNextAction");
    } else {
      this.set("earliestNextAction", Value.fromBigInt(<BigInt>value));
    }
  }

  get interval(): BigInt | null {
    let value = this.get("interval");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interval(value: BigInt | null) {
    if (!value) {
      this.unset("interval");
    } else {
      this.set("interval", Value.fromBigInt(<BigInt>value));
    }
  }

  get target(): BigInt | null {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set target(value: BigInt | null) {
    if (!value) {
      this.unset("target");
    } else {
      this.set("target", Value.fromBigInt(<BigInt>value));
    }
  }

  get targetCondition(): string | null {
    let value = this.get("targetCondition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set targetCondition(value: string | null) {
    if (!value) {
      this.unset("targetCondition");
    } else {
      this.set("targetCondition", Value.fromString(<string>value));
    }
  }

  get optimisticOracleLivenessTime(): BigInt | null {
    let value = this.get("optimisticOracleLivenessTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set optimisticOracleLivenessTime(value: BigInt | null) {
    if (!value) {
      this.unset("optimisticOracleLivenessTime");
    } else {
      this.set("optimisticOracleLivenessTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get priceIdentifier(): Bytes | null {
    let value = this.get("priceIdentifier");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set priceIdentifier(value: Bytes | null) {
    if (!value) {
      this.unset("priceIdentifier");
    } else {
      this.set("priceIdentifier", Value.fromBytes(<Bytes>value));
    }
  }

  get customAncillaryData(): Bytes | null {
    let value = this.get("customAncillaryData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set customAncillaryData(value: Bytes | null) {
    if (!value) {
      this.unset("customAncillaryData");
    } else {
      this.set("customAncillaryData", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("proposalData", Value.fromString(""));
    this.set("reward", Value.fromString(""));
    this.set("countYesVotes", Value.fromBigInt(BigInt.zero()));
    this.set("countNoVotes", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Proposal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalData(): string {
    let value = this.get("proposalData");
    return value!.toString();
  }

  set proposalData(value: string) {
    this.set("proposalData", Value.fromString(value));
  }

  get reward(): string {
    let value = this.get("reward");
    return value!.toString();
  }

  set reward(value: string) {
    this.set("reward", Value.fromString(value));
  }

  get countYesVotes(): BigInt {
    let value = this.get("countYesVotes");
    return value!.toBigInt();
  }

  set countYesVotes(value: BigInt) {
    this.set("countYesVotes", Value.fromBigInt(value));
  }

  get countNoVotes(): BigInt {
    let value = this.get("countNoVotes");
    return value!.toBigInt();
  }

  set countNoVotes(value: BigInt) {
    this.set("countNoVotes", Value.fromBigInt(value));
  }
}

export class ProposalSummary extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("reward", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProposalSummary entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProposalSummary entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProposalSummary", id.toString(), this);
    }
  }

  static load(id: string): ProposalSummary | null {
    return changetype<ProposalSummary | null>(store.get("ProposalSummary", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reward(): string {
    let value = this.get("reward");
    return value!.toString();
  }

  set reward(value: string) {
    this.set("reward", Value.fromString(value));
  }

  get timeStamp(): BigInt | null {
    let value = this.get("timeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeStamp(value: BigInt | null) {
    if (!value) {
      this.unset("timeStamp");
    } else {
      this.set("timeStamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get result(): BigInt | null {
    let value = this.get("result");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set result(value: BigInt | null) {
    if (!value) {
      this.unset("result");
    } else {
      this.set("result", Value.fromBigInt(<BigInt>value));
    }
  }
}
